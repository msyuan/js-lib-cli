import babel from '@rollup/plugin-babel';
import commonjs from '@rollup/plugin-commonjs';
import terser from '@rollup/plugin-terser';
<%if (typescript) {%>import typescript from '@rollup/plugin-typescript';<%}%>
import nodeResolve from '@rollup/plugin-node-resolve';
import alias from '@rollup/plugin-alias';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

//  __filename包含当前模块文件的绝对路径
const __filename = fileURLToPath(import.meta.url);
// 通过使用某些函数创建一个自定义__dirname变量来修复“__dirname is not defined in ES module scope”错误。
const __dirname = path.dirname(__filename);
const pathResolve = p => path.resolve(__dirname, p);
const NODE_ENV = process.env.NODE_ENV; // 环境变量
const isProd = NODE_ENV === 'production';


const name = '<%=name%>';

export default {
  <%if (typescript) {%>
  input: 'src/index.ts', // 入口文件
  <%}%>
  <%if (!typescript) {%>
  input: 'src/index.js', // 入口文件
  <%}%>
  output: [
    {
      file: './dist/<%=name%>.esm.min.js', // 输出文件的路径和名称
      format: 'es', // 将软件包保存为 ES 模块文件，在现代浏览器中可以通过 <script type=module> 标签引入
      name: name, // 当format为iife和umd时必须提供，将作为全局变量挂在window(浏览器环境)下，打包后的全局变量
    },
    {
      file: './dist/<%=name%>.cjs.min.js',
      format: 'cjs', // CommonJS，适用于 Node 和 Browserify/Webpack 有六种输出格式：amd / es/ system / iife / umd / cjs
      name: name,
    },
    {
      file: './dist/<%=name%>.aio.js',
      format: 'umd', // 通用
      name: name,
    },
  ],
  plugins: [
    // 使用插件 @rollup/plugin-babel
    babel({
      // https://github.com/rollup/plugins/tree/master/packages/babel#babelhelpers
      babelHelpers: 'bundled',
      exclude: 'node_modules/**', // 排除依赖 只编译我们的源代码
    }),
    <%if (typescript) {%>
    typescript(),
    <%}%>
    commonjs(),
    isProd && terser(),
    nodeResolve({
      mian: true, //
    }),
    alias({
      resolve: ['.ts', '.js'], // 可选，默认情况下这只会查找 .js 文件或文件夹
      entries: {
        '@': pathResolve('src'),
      },
    }),
  ],
};
